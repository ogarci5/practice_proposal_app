require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProposalsController do
  
  let(:user) { FactoryGirl.create(:user) }
  let(:proposal) {FactoryGirl.create(:proposal)}
  let(:response) {FactoryGirl.create(:response)}
  let(:valid_attributes) {{name: proposal.name, description: proposal.description}}
  # Proposal and response creation
  before do
    proposal.user_id = user.id
    proposal.save
    response.proposal_id = proposal.id
    response.user_id = proposal.user_id
    response.save
  end

  describe "GET show" do
    it "assigns the requested proposal as @proposal" do
      get :show, {:id => proposal.to_param, :authenticity_token => user.remember_token}
      assigns(:proposal).should eq(proposal)
    end
  end

  describe "GET index" do
    it "assigns all sent proposals as @sent" do
      get :index, {:authenticity_token => user.remember_token}
      assigns(:sent).should eq(Proposal.where(:user_id => user.id).find_all {|p| !p.reviewed?})
    end
    it "assigns all received proposals as @received" do
      get :index, {:authenticity_token => user.remember_token}
      assigns(:received).should eq(Proposal.all.find_all {|p| !p.reviewed? && p.to_user.id == user.id})
    end
  end
  
  describe "GET new" do
    it "assigns a new proposal as @proposal" do
      get :new, {:authenticity_token => user.remember_token}
      assigns(:proposal).should be_a_new(Proposal)
    end
    it "assigns all users as @users" do
      get :new, {:authenticity_token => user.remember_token}
      assigns(:users).should eq(User.all)
    end
  end
  
  describe "POST create" do
    describe "with valid params" do
      it "creates a new Proposal" do
        expect {
          post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token,
            :response => {:user_id => user.id}}
        }.to change(Proposal, :count).by(1)
      end
      
      it "creates a proposal that has a relationship with current_user" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token,
          :response => {:user_id => user.id}}
        proposal = assigns(:proposal)
        proposal.user.should eq(user)
      end
      
      it "creates a new Response" do
        expect {
          post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token,
            :response => {:user_id => user.id}}
          }.to change(Response, :count).by(1)
      end
      
      it "creates a response that has a relationship with the proposal" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token,
          :response => {:user_id => user.id}}
        proposal = assigns(:proposal)
        response = assigns(:response)
        response.proposal.should eq(proposal)
      end
      
      it "creates a response that has a relationship with current_user" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token,
          :response => {:user_id => user.id}}
        response = assigns(:response)
        response.user.should eq(user)
      end
      
      it "assigns a newly created proposal as @proposal" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token, 
            :response => {:user_id => user.id}}
        assigns(:proposal).should be_a(Proposal)
        assigns(:proposal).should be_persisted
      end

      it "redirects to proposals index" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token, 
          :response => {:user_id => user.id}}
        response.should redirect_to proposals_path      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved soa_proposal as @soa_proposal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:proposal => {}, :authenticity_token => user.remember_token}
        assigns(:proposal).should be_a_new(Proposal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:proposal => {}, :authenticity_token => user.remember_token}
        response.should render_template("new")
      end
    end
  end
end
