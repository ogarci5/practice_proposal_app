require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProposalsController do
=begin
  subject { page }
  
  let(:user) { FactoryGirl.create(:user) }
  before do 
    visit login_path
    valid_login(user)
  end


  #it "should create a new instance given valid attributes" do
  #  FactoryGirl.create(:proposal)
  #end

  describe "GET show" do
    it "assigns the requested proposal as @proposal" do
      proposal = FactoryGirl.create(:proposal)
      response = FactoryGirl.create(:response)
      proposal.user_id = user.id
      response.proposal_id = proposal.id
      response.user_id = proposal.user_id
      proposal.response = response
      
      get :show, {:id => proposal.to_param}
      assigns(:proposal).should eq(proposal)
    end
  end

  describe "GET index" do
    it "assigns all soa_proposals as @soa_proposals" do
      proposal = Soa::Proposal.create! valid_attributes
      get :index, {}, valid_session
      assigns(:soa_proposals).should eq([proposal])
    end
  end


  describe "GET show" do
    it "assigns the requested soa_proposal as @soa_proposal" do
      proposal = Soa::Proposal.create! valid_attributes
      get :show, {:id => proposal.to_param}, valid_session
      assigns(:soa_proposal).should eq(proposal)
    end
  end

  describe "GET new" do
    it "assigns a new soa_proposal as @soa_proposal" do
      get :new, {}, valid_session
      assigns(:soa_proposal).should be_a_new(Soa::Proposal)
    end
  end

  describe "GET edit" do
    it "assigns the requested soa_proposal as @soa_proposal" do
      proposal = Soa::Proposal.create! valid_attributes
      get :edit, {:id => proposal.to_param}, valid_session
      assigns(:soa_proposal).should eq(proposal)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Soa::Proposal" do
        expect {
          post :create, {:soa_proposal => valid_attributes}, valid_session
        }.to change(Soa::Proposal, :count).by(1)
      end

      it "assigns a newly created soa_proposal as @soa_proposal" do
        post :create, {:soa_proposal => valid_attributes}, valid_session
        assigns(:soa_proposal).should be_a(Soa::Proposal)
        assigns(:soa_proposal).should be_persisted
      end

      it "redirects to the created soa_proposal" do
        post :create, {:soa_proposal => valid_attributes}, valid_session
        response.should redirect_to(Soa::Proposal.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved soa_proposal as @soa_proposal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:soa_proposal => {}}, valid_session
        assigns(:soa_proposal).should be_a_new(Soa::Proposal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:soa_proposal => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        # Assuming there are no other soa_proposals in the database, this
        # specifies that the Soa::Proposal created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Soa::Proposal.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => proposal.to_param, :soa_proposal => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested soa_proposal as @soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        put :update, {:id => proposal.to_param, :soa_proposal => valid_attributes}, valid_session
        assigns(:soa_proposal).should eq(proposal)
      end

      it "redirects to the soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        put :update, {:id => proposal.to_param, :soa_proposal => valid_attributes}, valid_session
        response.should redirect_to(proposal)
      end
    end

    describe "with invalid params" do
      it "assigns the soa_proposal as @soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        put :update, {:id => proposal.to_param, :soa_proposal => {}}, valid_session
        assigns(:soa_proposal).should eq(proposal)
      end

      it "re-renders the 'edit' template" do
        proposal = Soa::Proposal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        put :update, {:id => proposal.to_param, :soa_proposal => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested soa_proposal" do
      proposal = Soa::Proposal.create! valid_attributes
      expect {
        delete :destroy, {:id => proposal.to_param}, valid_session
      }.to change(Soa::Proposal, :count).by(-1)
    end

    it "redirects to the soa_proposals list" do
      proposal = Soa::Proposal.create! valid_attributes
      delete :destroy, {:id => proposal.to_param}, valid_session
      response.should redirect_to(soa_proposals_url)
    end
  end
=end
end
