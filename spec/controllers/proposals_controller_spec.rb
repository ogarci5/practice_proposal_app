require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProposalsController do

  subject { page }
  
  let(:user) { FactoryGirl.create(:user) }
  let(:proposal) {FactoryGirl.create(:proposal)}
  let(:response) {FactoryGirl.create(:response)}
  # Proposal and response creation
  before do
    proposal.user_id = user.id
    proposal.save
    response.proposal_id = proposal.id
    response.user_id = proposal.user_id
    response.save
  end
  
  def valid_attributes 
    {name: proposal.name, description: proposal.description}
  end

  describe "GET show" do
    it "assigns the requested proposal as @proposal" do
      get :show, {:id => proposal.to_param, :authenticity_token => user.remember_token}
      assigns(:proposal).should eq(proposal)
    end
  end

  describe "GET index" do
    it "assigns all sent proposals as @sent" do
      get :index, {:authenticity_token => user.remember_token}
      assigns(:sent).should eq(Proposal.where(:user_id => user.id).find_all {|p| !p.reviewed?})
    end
    it "assigns all received proposals as @received" do
      get :index, {:authenticity_token => user.remember_token}
      assigns(:received).should eq(Proposal.all.find_all {|p| !p.reviewed? && p.to_user.id == user.id})
    end
  end
  
  describe "GET new" do
    it "assigns a new proposal as @proposal" do
      get :new, {:authenticity_token => user.remember_token}
      assigns(:proposal).should be_a_new(Proposal)
    end
    it "assigns all users as @users" do
      get :new, {:authenticity_token => user.remember_token}
      assigns(:users).should eq(User.all)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Proposal" do
        expect {
          post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token, 
            :response => user.id}
        }.to change(Proposal, :count).by(1)
      end

      it "assigns a newly created proposal as @proposal" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token, 
            :response => user.id}
        assigns(:proposal).should be_a(proposal)
        assigns(:proposal).should be_persisted
      end

      it "redirects to proposals index" do
        post :create, {:proposal => valid_attributes, :authenticity_token => user.remember_token, 
          :response => user.id}
        response.should redirect_to proposals_paths
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved soa_proposal as @soa_proposal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:proposal => {}, :authenticity_token => user.remember_token}
        assigns(:proposal).should be_a_new(Proposal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Proposal.any_instance.stub(:save).and_return(false)
        post :create, {:proposal => {}, :authenticity_token => user.remember_token}
        response.should render_template("new")
      end
    end
  end
=begin
  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        # Assuming there are no other soa_proposals in the database, this
        # specifies that the Soa::Proposal created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Soa::Proposal.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => proposal.to_param, :soa_proposal => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested soa_proposal as @soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        put :update, {:id => proposal.to_param, :soa_proposal => valid_attributes}, valid_session
        assigns(:soa_proposal).should eq(proposal)
      end

      it "redirects to the soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        put :update, {:id => proposal.to_param, :soa_proposal => valid_attributes}, valid_session
        response.should redirect_to(proposal)
      end
    end

    describe "with invalid params" do
      it "assigns the soa_proposal as @soa_proposal" do
        proposal = Soa::Proposal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        put :update, {:id => proposal.to_param, :soa_proposal => {}}, valid_session
        assigns(:soa_proposal).should eq(proposal)
      end

      it "re-renders the 'edit' template" do
        proposal = Soa::Proposal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Soa::Proposal.any_instance.stub(:save).and_return(false)
        put :update, {:id => proposal.to_param, :soa_proposal => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested soa_proposal" do
      proposal = Soa::Proposal.create! valid_attributes
      expect {
        delete :destroy, {:id => proposal.to_param}, valid_session
      }.to change(Soa::Proposal, :count).by(-1)
    end

    it "redirects to the soa_proposals list" do
      proposal = Soa::Proposal.create! valid_attributes
      delete :destroy, {:id => proposal.to_param}, valid_session
      response.should redirect_to(soa_proposals_url)
    end
  end
=end
end
